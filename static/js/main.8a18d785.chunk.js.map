{"version":3,"sources":["images/logo.svg","images/shoppingBag.svg","logo.svg","components/Home.js","components/Navbar.js","components/ShoppingCart.js","Routes.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Home","Navbar","to","className","src","logo","alt","class","type","placeholder","shoppingBag","ShoppingCart","RouteConfig","exact","path","component","App","Routes","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"mIAAAA,EAAOC,QAAU,IAA0B,kC,mBCA3CD,EAAOC,QAAU,IAA0B,yC,4ECA3CD,EAAOC,QAAU,IAA0B,kC,4ECE9BC,G,kBAAO,WAClB,OACE,6BACE,kD,yCCCOC,EAAS,WACpB,OACE,gCACE,6BACE,4BACE,4BACE,kBAAC,IAAD,CAAMC,GAAG,IAAIC,UAAW,QACtB,yBAAKC,IAAKC,IAAMC,IAAI,WAIxB,4BACE,kBAAC,IAAD,CAAMJ,GAAG,IAAIC,UAAW,QAAxB,QAKF,4BACE,kBAAC,IAAD,CAAMD,GAAG,YAAYC,UAAW,QAAhC,UAIF,4BACE,kBAAC,IAAD,CAAMD,GAAG,SAASC,UAAW,QAA7B,WAMN,yBAAKI,MAAM,YACT,2BAAOC,KAAK,OAAOC,YAAY,WAC/B,kBAAC,IAAD,CAAMP,GAAG,gBAAgBC,UAAW,QAClC,yBAAKC,IAAKM,IAAaJ,IAAI,sBCpCxBK,EAAe,WAC1B,OACE,6BACE,0D,OCgBSC,MAdf,WACE,OACE,6BACE,kBAAC,IAAD,KACE,kBAAC,EAAD,MACA,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAWf,IACjC,kBAAC,IAAD,CAAOa,OAAK,EAACC,KAAK,gBAAgBC,UAAWJ,IAC7C,kBAAC,IAAD,CAAOG,KAAK,IAAIC,UAAW,kBAAM,gDCF5BC,MARf,WACE,OACE,6BACE,kBAACC,EAAD,QCIcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.8a18d785.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.cfa4680f.svg\";","module.exports = __webpack_public_path__ + \"static/media/shoppingBag.ba4d0d00.svg\";","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from \"react\";\r\n\r\nexport const Home = () => {\r\n  return (\r\n    <div>\r\n      <h1>Welcome to Home</h1>\r\n    </div>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport \"../App.css\";\r\nimport { Link } from \"react-router-dom\";\r\nimport logo from \"../images/logo.svg\";\r\nimport shoppingBag from \"../images/shoppingBag.svg\";\r\n\r\nexport const Navbar = () => {\r\n  return (\r\n    <header>\r\n      <nav>\r\n        <ul>\r\n          <li>\r\n            <Link to=\"/\" className={\"link\"}>\r\n              <img src={logo} alt=\"logo\" />\r\n            </Link>\r\n          </li>\r\n\r\n          <li>\r\n            <Link to=\"/\" className={\"link\"}>\r\n              Men\r\n            </Link>\r\n          </li>\r\n\r\n          <li>\r\n            <Link to=\"/products\" className={\"link\"}>\r\n              Women\r\n            </Link>\r\n          </li>\r\n          <li>\r\n            <Link to=\"/about\" className={\"link\"}>\r\n              Kids\r\n            </Link>\r\n          </li>\r\n        </ul>\r\n      </nav>\r\n      <div class=\"rightSec\">\r\n        <input type=\"text\" placeholder=\"Search\" />\r\n        <Link to=\"/shoppingCart\" className={\"link\"}>\r\n          <img src={shoppingBag} alt=\"shopping cart\" />\r\n        </Link>\r\n      </div>\r\n    </header>\r\n  );\r\n};\r\n","import React from \"react\";\r\n\r\nexport const ShoppingCart = () => {\r\n  return (\r\n    <div>\r\n      <h1>Welcome to shopping cart</h1>\r\n    </div>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport { Home } from \"./components/Home.js\";\r\nimport { Navbar } from \"./components/Navbar\";\r\nimport { ShoppingCart } from \"./components/ShoppingCart\";\r\n\r\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\r\n\r\nfunction RouteConfig() {\r\n  return (\r\n    <div>\r\n      <Router>\r\n        <Navbar />\r\n        <Switch>\r\n          <Route exact path=\"/\" component={Home} />\r\n          <Route exact path=\"/ShoppingCart\" component={ShoppingCart} />\r\n          <Route path=\"*\" component={() => <h2>Error 404</h2>} />\r\n        </Switch>\r\n      </Router>\r\n    </div>\r\n  );\r\n}\r\nexport default RouteConfig;\r\n","import React from \"react\";\nimport logo from \"./logo.svg\";\nimport \"./App.css\";\nimport Routes from \"./Routes\";\n\nfunction App() {\n  return (\n    <div>\n      <Routes />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}